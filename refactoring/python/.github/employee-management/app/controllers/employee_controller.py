class EmployeeController:
    """Controller for handling employee-related operations."""
    
    def __init__(self):
        # Initialize a simple in-memory storage for employees
        self.employees = []
        self.next_id = 1

    def add_employee(self, employee_data):
        """Add a new employee record."""
        new_employee = {
            'id': self.next_id,
            **employee_data
        }
        self.employees.append(new_employee)
        self.next_id += 1
        return new_employee

    def _get_all_employees(self):
        """Private method to retrieve the entire list of employees."""
        return self.employees

    def getAllEmployees(self):
        """Retrieve the entire list of employees."""
        return self._get_all_employees()

    def _save_employee(self, employee):
        """Private method to save an employee to the list."""
        self.employees.append(employee)

    def saveEmployee(self, employee):
        """Save an employee to the list."""
        self._save_employee(employee)
        return {'message': 'Employee saved successfully'}

    def list_employees(self):
        """List all employee records."""
        return self.employees

    def update_employee(self, employee_id, employee_data):
        """Update an existing employee record."""
        for employee in self.employees:
            if employee['id'] == employee_id:
                employee.update(employee_data)
                return employee
        raise ValueError(f"Employee with id {employee_id} not found")

    def delete_employee(self, employee_id):
        """Delete an employee record by ID."""
        try:
            for employee in self.employees:
                if employee['id'] == employee_id:
                    self.employees.remove(employee)
                    return {'message': f'Employee with id {employee_id} deleted successfully'}
            raise ValueError(f"Employee with id {employee_id} not found")
        except ValueError as e:
            return {'error': str(e)}

    def getEmployeeById(self, employee_id):
        """Retrieve an employee by ID."""
        try:
            for employee in self.employees:
                if employee['id'] == employee_id:
                    return employee
            raise ValueError(f"Employee with id {employee_id} not found")
        except ValueError as e:
            return {'error': str(e)}

    def _find_employee_by_email(self, email):
        """Private method to find an employee by email."""
        for employee in self.employees:
            if employee.get('email') == email:
                return employee
        return None

    def getEmployeeByEmail(self, email):
        """Retrieve an employee by email."""
        employee = self._find_employee_by_email(email)
        if employee:
            return employee
        return {'error': f"Employee with email {email} not found"}

    def _sort_employees_by_last_name(self, employees):
        """Private method to sort employees by last name."""
        return sorted(employees, key=lambda e: e['name'].split()[-1])

    def getSortedEmployeesByLastName(self):
        """Retrieve all employees sorted by last name."""
        return self._sort_employees_by_last_name(self.employees)

# Generated by Copilot